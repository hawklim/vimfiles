snippet php
	<?php
	${0}

snippet def
	define('${1:CONST}', ${2});${0}

snippet ec
	echo ${1};${0}

snippet pec
	<?php echo ${1}; ?>${0}

snippet arr
	$${1:array} = array('${2}' => ${3} ${0});

snippet inc
	include '${1:file}';${0}

snippet inco
	include_once '${1:file}';${0}

snippet req
	require '${1:file}';${0}

snippet reqo
	require_once '${1:file}';${0}

snippet if?
	$${1:ret} = (${2:#:condition}) ? ${3:#:a} : ${4:#:b};${0}

snippet if
	if (${1:#:condition})
    {
		${0}
	}

snippet ife
	if (${1:#:condition})
    {
		${2}
	}
    else
    {
		${3:#:code...}
	}
    {0}

snippet else
	else
    {
		${0}
	}

snippet elseif
	elseif (${1:#:condition})
    {
		${0}
	}

snippet for
	for ($${1:i}=${2:0}; $$1 < ${3:num}; $$1++)
    { 
		${0}
	}

snippet fore
	foreach ($${1:array} as $${2:value})
    {
		${0}
	}

snippet forek
	foreach ($${1:array} as $${2:key} => $${3:value})
    {
		${0}
	}

snippet do
	do
    {
		${0}
	} 
    while (${1:#:condition});

snippet wh
	while (${1:#:condition})
    {
		${0}
	}

snippet case
	case '${1:#:variable}' :
		${0:#:code...}
		break;

snippet sw
	switch (${1:#:variable})
    {
	    case '${2:#:value}' :
		    ${3:#:code...}
		    break;
	    ${0}
	    default:
		    ${4:#:code...}
		    break;
	}

snippet fun
abbr function () {}
	function ${1:function_name}(${2:#:args})
	{
		${0}
	}

snippet +fun
abbr public function () {}
	public function ${1:function_name}(${2:#:args})
	{
		${0}
	}

snippet *fun
abbr protected function () {}
	protected function ${1:function_name}(${2:#:args})
	{
		${0}
	}

snippet -fun
abbr private function () {}
	private function ${1:function_name}(${2:#:args})
	{
		${0}
	}

snippet ret
	return ${1};${0}

snippet retf
	return FALSE;

snippet rett
	return TRUE;

snippet class
	class ${1:class_name} {
		${0}
	}

snippet con
	function __construct(${1})
	{
		${0}
	}

snippet docc
	/**
	 * ${3:#:undocumented class variable}
	 *
	 * @var ${4:#:string}
	 **/
	${1:#:var} $${2};${0}

snippet docd
	/**
	 * ${3:#:undocumented constant}
	 **/
	define(${1} ${2});${0}

snippet docs
	/**
	 * ${4:#:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6}
	 **/
	${1}function ${2}(${3});${0}

snippet docf
	/**
	 * ${4:#:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6}
	 **/
	${1}function ${2}(${3})
	{
		${0}
	}


snippet doch
	/**
	 * ${1}
	 *
	 * @author ${2}
	 * @version ${3}
	 * @copyright ${4}
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 **/

snippet doci
	/**
	 * ${2:#:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4}
	 **/
	interface ${1}
	{
		${0}
	} // END interface $1

snippet c
	/**
	 * $0
	 */
