snippet php
	<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
	${0}

snippet def
	define('${1:CONST}', ${2});

snippet ec
	echo ${1};

snippet et
    extends

snippet pe
	<?php echo ${1}; ?>

snippet arr
	$${1:array} = array(${2});

snippet inc
	include '${1:file}';

snippet inco
	include_once '${1:file}';

snippet req
	require (${1:file});

snippet reqo
	require_once(${1:file});

snippet a
	$${1:val1} = ${2:val2};

snippet ex
	exit;

snippet du
	dump(${0});

snippet pr
	print_r(${1});

snippet if?
	$${1:ret} = ${2:#:condition} ? ${3:#:a} : ${4:#:b};

snippet if
	if (${1:#:condition}) {
		${0}
	}

snippet ife
	if (${1:#:condition}) {
		${2}
	}
	else {
		${3:#:code...}
	}

snippet else
	else {
		${0}
	}

snippet elseif
	elseif (${1:#:condition})
	{
		${0}
	}

snippet for
	for ($${1:i}=${2:0}; $$1 < ${3:num}; $$1++)
	{
		${0}
	}

snippet fore
	foreach ($${1:array} as $${2:value}) {
		${0}
	}

snippet forek
	foreach ($${1:array} as $${2:key} => $${3:value})
	{
		${0}
	}

snippet do
	do
	{
		${0}
	}
	while (${1:#:condition});

snippet wh
	while (${1:#:condition})
	{
		${0}
	}

snippet case
	case '${1:#:variable}' :
		${0:#:code...}
		break;

snippet sw
	switch (${1:#:variable})
	{
		case '${2:#:value}' :
			${3:#:code...}
			break;
		${0}
		default:
			${4:#:code...}
			break;
	}

snippet fun
abbr function () {}
	function ${1:function_name}(${2:#:args}) {
		${0}
	}

snippet +fun
abbr public function () {}
	public function ${1:function_name}(${2:#:args}) {
		${0}
	}

snippet *fun
abbr protected function () {}
	protected function ${1:function_name}(${2:#:args}) {
		${0}
	}

snippet -fun
abbr private function () {}
	private function ${1:function_name}(${2:#:args}) {
		${0}
	}

snippet ret
	return ${1};

snippet retf
	return FALSE;

snippet rett
	return TRUE;

snippet class
	class ${1:class_name} {

		${0}

	}

snippet con
    /**
     * 构造函数
	 *
	 * @access	public
	 * @return	void
     */
	function __construct() {
		${0}
	}

snippet pcon
	parent::__construct();

snippet cc
	// ${1:text}

snippet cm
	/* ${1:text} */

snippet c
	/**
	 * ${1}
	 */

snippet fdoc
	/**
	 * ${1:undocumented function}
	 *
	 * @access	${2:public}
	 * @return	${3:void}
	 */
	${0}
